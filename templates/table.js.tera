const config = {
    "columns" : [{% for title in titles %}"{{ title }}"{% if not loop.last %},{% endif %}{% endfor %}],
    "displayed_columns" : [{% for title in titles %}{% if display_modes[title] == "normal" %}"{{ title }}"{% if not loop.last %},{% endif %}{% endif %}{% endfor %}],
    "num" : [{% for title in titles %}{{ num[title] }}{% if not loop.last %},{% endif %}{% endfor %}],
    "dp_num" : [{% for title in titles %}{% if display_modes[title] == "normal" %}{{ num[title] }}{% if not loop.last %},{% endif %}{% endif %}{% endfor %}],
    "tick_titles" : [{% for title, tick_plot in tick_plots %}"{{ title }}"{% if not loop.last %},{% endif %}{% endfor %}],
    "heatmap_titles" : [{% for title, hm in heatmaps %}"{{ title }}"{% if not loop.last %},{% endif %}{% endfor %}],
    "links" : [{% for title, link_url in link_urls %}"{{ title }}"{% if not loop.last %},{% endif %}{% endfor %}],
    {% for title in titles %}
    "{{ title }}": {
        "is_float": {{ is_float[title] | json_encode }}
        {% if precisions[title] %},"precision": {{ precisions[title] }}{% endif %}
    },
    {% endfor %}
    "detail_mode": {{ detail_mode }},
    "header_label_length": {{ header_labels | length }},
    "ticks": [
        {% for title, tick_plot in tick_plots %}
        {
            "index": {{ loop.index0 }},
            "title": "{{ title }}",
            "slug_title": "{{ title | slugify }}",
            "specs": {{ tick_plot }}
        },
        {% endfor %}
    ],
    "link_urls": [
        {% for title, link_url in link_urls %}
        {
            "title": "{{ title }}",
            "url": "{{ link_url }}"
        },
        {% endfor %}
    ],
    "ellipsis": [
        {% for title, ellipsis in ellipses %}
        {
            "title": "{{ title }}",
            "ellipsis": {{ ellipsis }}
        },
        {% endfor %}
    ],
    "bars": [
        {% for title, bar_plot in bar_plots %}
        {
            "index": {{ loop.index0 }},
            "title": "{{ title }}",
            "slug_title": "{{ title | slugify }}",
            "specs": {{ bar_plot }}
        },
        {% endfor %}
    ],
    "heatmaps": [
        {% for title, tuple in heatmaps %}
        {
            "index": {{ loop.index0 }},
            "title": "{{ title }}",
            "slug_title": "{{ title | slugify }}",
            "heatmap": {{ tuple.0 | json_encode }},
            "domain": {{ tuple.1 | json_encode }},
            "scale": vega.scale('{{ tuple.0.scale }}')(){% if tuple.0.scale != "ordinal" %}.clamp({{ tuple.0.clamp }}){% endif %}.domain({{ tuple.1 }}).range({% if tuple.0.color_scheme %}vega.scheme('{{ tuple.0.color_scheme }}'){% else %}[{% for color in tuple.0.range %}"{{ color }}"{% if not loop.last %},{% endif %}{% endfor %}]{% endif %}),
        },
        {% endfor %}
    ],
}

$(document).ready(function() {
    $('.table-container').show();
    $('.loading').hide();
    $('#pagination').show();
    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    });
    $(function () {
        $('[data-toggle="popover"]').popover()
    });
    $('.modal').on('shown.bs.modal', function () {
        window.dispatchEvent(new Event('resize'));
    });
    var decompressed = JSON.parse(LZString.decompressFromUTF16(data));

    if (linkouts != null) {
        var decompressed_linkouts = JSON.parse(LZString.decompressFromUTF16(linkouts));
    }

    var format = {% if formatter %}{{ '{' }}{% for f,v in formatter %}"{{ f }}":{{ v }}{% if not loop.last %},{% endif %}{% endfor %}{{ '}' }}{% else %}[];{% endif %}

    let bs_table_cols = [{% if not detail_mode and not header_labels | length == 0 %}{field: '', title: '', formatter: function(value){ return value }},{% endif %}{% for title in titles %}{% if display_modes[title] == "normal" %}{
    field: '{{ title }}',
    title: '{% if labels[title] %}{{ labels[title] }}{% else %}{{ title }}{% endif %}\r\n                        <a class=\"sym\" data-toggle=\"modal\" data-target=\"#modal_{{ loop.index0 }}\" onclick=\"if (show_plot_{{ loop.index0 }}) {vegaEmbed(\'#plot_{{ loop.index0 }}\', plot_{{ loop.index0 }})} else {document.getElementById(\'plot_{{ loop.index0 }}\').innerHTML = \'<p>No reasonable plot possible.</p>\'}\">\r\n                            <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-bar-chart-fill\" fill=\"currentColor\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\">\r\n                                <rect width=\"4\" height=\"5\" x=\"1\" y=\"10\" rx=\"1\"\/>\r\n                                <rect width=\"4\" height=\"9\" x=\"6\" y=\"6\" rx=\"1\"\/>\r\n                                <rect width=\"4\" height=\"14\" x=\"11\" y=\"1\" rx=\"1\"\/>\r\n                            <\/svg>\r\n                        <\/a>\r\n                        {% if not is_single_page %}<a class=\"sym\" data-toggle=\"modal\" onclick=\"embedSearch({{ loop.index0 }})\" data-target=\"#search\">\r\n                        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-search\" fill=\"currentColor\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\">\r\n                                <path fill-rule=\"evenodd\" d=\"M10.442 10.442a1 1 0 0 1 1.415 0l3.85 3.85a1 1 0 0 1-1.414 1.415l-3.85-3.85a1 1 0 0 1 0-1.415z\"\/>\r\n                                <path fill-rule=\"evenodd\" d=\"M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z\"\/>\r\n                            <\/svg>\r\n                        <\/a>{% endif %}'{% if is_single_page %},filterControl: "input"{% endif %},
        formatter: function(value, row, index, field) { if (format["{{ title }}"] != undefined){ return format["{{ title }}"](value, row, index, field) } else {% if precisions[title] and is_float[title] %}{ return precision_formatter({{ precisions[title] }},value) }{% else %}{ return value }{% endif %} }
    }{% if not loop.last %},{% endif %}{% endif %}{% endfor %}];

    if (linkouts != null) {
        bs_table_cols.push({field: 'linkouts', title: '', formatter: function(value){ return value }});
    }

    $('#table').bootstrapTable({
        columns: bs_table_cols,
        {% if is_single_page %}pagination: true, pageSize: {{ page_size}},{% endif %}
        data: [],
        {% if detail_mode %}detailView: true, detailFormatter: "detailFormatter"{% endif %}
    })

    let additional_headers = "{% if additional_headers %}{% for ah in additional_headers %}<tr><td {% if not detail_mode %}style='border: none !important;'{% endif%}>{% if header_labels[loop.index] %}<b>{{ header_labels[loop.index] }}</b>{% endif %}</td>{% for title in titles %}{% if display_modes[title] == "normal" %}<td>{{ ah[title] }}</td>{% endif %}{% endfor %}</tr>{% endfor %}{% endif %}";
    let cp = [{% for title, custom_plot in custom_plots %}"{{ title }}"{% if not loop.last %},{% endif %}{% endfor %}];

    var header_height = (80+6*Math.max(...(config.displayed_columns.map(el => el.length)))*Math.SQRT2)/2 {% if is_single_page %} + 45{% endif %};
    $('th').css("height", header_height);

    var table_rows = [];
    var j = 0;
    for (const r of decompressed) {
        var i = 0;
        row = {};
        for (const element of r) {
            row[config.columns[i]] = element;
            i++;
        }
        if (linkouts != null) {
            row["linkouts"] = decompressed_linkouts[j];
        }
        j++;
        table_rows.push(row);
    }

    {% if is_single_page %}
    $( "#btnHeatmap" ).on( "click", function() {
        var i = 0;
        var heatmap_data = JSON.parse(JSON.stringify(table_rows));
        for (const r of heatmap_data) {
            if (r.hasOwnProperty('linkouts')) delete r['linkouts']
            r.index = i;
            i++;
        }
        heatmap_plot.data.values = heatmap_data;
        vegaEmbed('#heatmap-plot', heatmap_plot);
    });
    {% endif %}

    $('#table').find('thead').append(additional_headers);
    $('#table').bootstrapTable('append', table_rows);

    $('#table').on('expand-row.bs.table', (event, index, row, detailView) => {
        let cp = [{% for title, custom_plot in custom_plots %}"{{ title }}"{% if not loop.last %},{% endif %}{% endfor %}];
        {% for title, custom_plot in custom_plots %}
        renderCustomPlotDetailView{{ loop.index0 }}(row[cp[{{ loop.index0 }}]], `#detail-plot-${index}-cp-{{ loop.index0 }}`);
        {% endfor %}

        for (o of config.heatmaps) {
            if (o.heatmap.custom_func) {
                colorizeDetailCard(custom_func(row[o.title], row), `#heatmap-${index}-${o.index}`, o.scale);
            } else {
                colorizeDetailCard(row[o.title], `#heatmap-${index}-${o.index}`, o.scale);
            }
        }

        for (o of config.ticks) {
            if (!config.displayed_columns.includes(o.title)) {
                renderDetailTickBarPlot(row[o.title], `#detail-plot-${index}-ticks-${o.index}`, o.specs, o.title);
            }
        }

        for (o of config.bars) {
            if (!config.displayed_columns.includes(o.title)) {
                renderDetailTickBarPlot(row[o.title], `#detail-plot-${index}-bars-${o.index}`, o.specs, o.title);
            }
        }
    })

    window.addEventListener('beforeprint', (event) => {
        setTimeout(function (){
            $('#table').bootstrapTable('togglePagination');
            render(additional_headers, config.displayed_columns, table_rows, config.columns, config);
            $('th').css("height", header_height - 15);
            {% if detail_mode %}
                $(`table > tbody > tr td:nth-child(1)`).each(function() {this.style.setProperty("display", "none");});
            {% endif %}
            if (config.length > 0) {
            $(`table > tbody > tr td:last-child`).each(function() {this.style.setProperty("display", "none");});
            $("table > thead > tr th:last-child").css("display", "none");
            }
        }, 0);
    });

    $( ".btn-sm" ).click(function() {
        var col = $(this).data( "col" );
        var field = $(this).data("val").toString();
        if (field.startsWith("<div")) {
            var temp = $(field);
            field = temp[0].dataset.value;
        }
        var marker = { "bin_start": field};
        var index = config.columns.indexOf(col);
        switch (index) {
            {% for title in titles %}case {{ loop.index0 }}:
                if (plot_{{ loop.index0 }}["layer"].length > 1) {
                    $('#modal_{{ loop.index0 }}').modal();
                    var marked_plot = JSON.parse(JSON.stringify(plot_{{ loop.index0 }}));
                    marked_plot["layer"][1]["data"]["values"].push(marker);
                    vegaEmbed('#plot_{{ loop.index0 }}', marked_plot);
                }
                break;
            {% endfor %}
        }
    });
    addNumClass(config.dp_num, additional_headers.length);

    render(additional_headers, config.displayed_columns, table_rows, config.columns, config);

    {% if not detail_mode and not header_labels | length == 0 %}
    $("table > thead > tr:first-child th:first-child").css("visibility", "hidden");
    $(`table > tbody > tr td:first-child`).each(function() {this.style.setProperty("visibility", "hidden"); this.style.setProperty("border", "none");});
    {% endif %}

    {% if is_single_page %}
    $('#right-top-nav').append($('<div class="btn-group" style="padding-right: 4px;"><span data-toggle="tooltip" data-placement="left" title="Clear filters"><button class="btn btn-outline-secondary" type="button" id="clear-filter"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-funnel" viewBox="0 0 16 16"><path d="M1.5 1.5A.5.5 0 0 1 2 1h12a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.128.334L10 8.692V13.5a.5.5 0 0 1-.342.474l-3 1A.5.5 0 0 1 6 14.5V8.692L1.628 3.834A.5.5 0 0 1 1.5 3.5v-2zm1 .5v1.308l4.372 4.858A.5.5 0 0 1 7 8.5v5.306l2-.666V8.5a.5.5 0 0 1 .128-.334L13.5 3.308V2h-11z"/></svg><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16"><path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/></svg></button></span></div>'))
    let filter_boundaries = {};
    let filters = {};
    let tick_brush_specs = {
        "width": 50,
        "height": 12,
        "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
        "data": {"values":[]},
        "mark": "tick",
        "encoding": {
            "tooltip": {"field": "value", "type": "quantitative"},
            "x": {
                "field": "value",
                "type": "quantitative",
                "scale": {"type": "linear", "zero": false},
                "axis": {
                    "title": null,
                    "orient": "top",
                    "labelFontWeight": "lighter"
                }
            },
            "color": {"condition": {"param": "selection", "value": "#0275d8"}, "value": "grey"}
        },
        "params": [{"name": "selection", "select": "interval"}],
        "config": {"axis": {"grid": false},"background": null, "style": {"cell": {"stroke": "transparent"}}, "tick": {"thickness": 0.5, "bandSize": 10}}
        };

    let brush_domains = {{ brush_domains }};
    let aux_domains = {{ aux_domains }};

   function render_brush_plots(reset) {
   let tick_brush = 0;
       for (title of config.displayed_columns) {
           let index = tick_brush + 1{% if detail_mode or not header_labels | length == 0 %} + 1{% endif %};
           if (config.dp_num[tick_brush]) {
               let plot_data = [];
               let values = []
               for (row of table_rows) {
                   if (row[title] != "" && row[title] != "NA") {
                       plot_data.push({"value": parseFloat(row[title])});
                       values.push(parseFloat(row[title]));
                   }
               }
               let min = Math.min(...values);
               let max = Math.max(...values);
               if (brush_domains[title] != undefined && config.tick_titles.includes(title)) {
                   min = Math.min(...brush_domains[title]);
                   max = Math.max(...brush_domains[title]);
               } else if (aux_domains[title] != undefined) {
                   aux_values = [min, max];
                   for (col of aux_domains[title]) {
                        for (row of table_rows) {
                            aux_values.push(parseFloat(row[col]));
                        }
                   }
                   min = Math.min(...aux_values);
                   max = Math.max(...aux_values);
               }
               if (Number.isInteger(min)) {
                   min = parseInt(min.toString());
               }
               if (Number.isInteger(max)) {
                   max = parseInt(max.toString());
               }
               let legend_tick_length = min.toString().length + max.toString().length;
               var s = tick_brush_specs;
               let has_labels = legend_tick_length < 8;
               s.encoding.x.axis.labels = has_labels;
               s.data.values = plot_data;
               s.name = title;
               s.encoding.x.axis.values = [min, max];
               s.encoding.x.scale.domain = [min, max];
               let brush_class = "";
               if (!has_labels) {
                   brush_class = "no-labels";
               }
               if(!reset) $(`table > thead > tr th:nth-child(${index})`).append(`<div class="filter-brush-container"><div class="filter-brush ${brush_class}" id="brush-${tick_brush}"></div></div>`);
               var opt = {"actions": false};
               vegaEmbed(`#brush-${tick_brush}`, JSON.parse(JSON.stringify(s)), opt).then(({spec, view}) => {
                   view.addSignalListener('selection', function(name, value) {
                       filter_boundaries[spec.name] = value;
                   });
                   view.addEventListener('mouseup', function(name, value) {
                       $('#table').bootstrapTable('filterBy', {"":""}, {
                           'filterAlgorithm': customFilter
                       })
                   });
               })
           } else {
           if(!reset){
               $(`table > thead > tr th:nth-child(${index})`).append(`<input class="form-control form-control-sm" id="filter-${index}" data-title="${title}" placeholder="Filter...">`);
                   $(`#filter-${index}`).on('input', function(event) {
                       filters[event.target.dataset.title] = $(`#filter-${index}`).val();
                       $('#table').bootstrapTable('filterBy', {"":""}, {
                           'filterAlgorithm': customFilter
                       })
                   });
               }
           }
           tick_brush++;
       }
   }

   render_brush_plots(false);


    function customFilter(row, filter) {
        for (title of config.displayed_columns) {
            if (filter_boundaries[title] !== undefined && !$.isEmptyObject(filter_boundaries[title])) {
                if (row[title] < filter_boundaries[title]['value'][0] || row[title] > filter_boundaries[title]['value'][1]) {
                    return false;
                }
            }
            if (filters[title] !== undefined && filters[title] !== "") {
                if (!row[title].includes(filters[title])) {
                    return false;
                }
            }
        }
        return true
    }
    {% endif %}

    $('#clear-filter').click(function clearFilter() {
        filter_boundaries = {};
        filters = {};
        $('#table').bootstrapTable('filterBy', {"":""}, {
            'filterAlgorithm': customFilter
        })
        $('.form-control').each( function() {
            $(this).val('');
        });
        render_brush_plots(true);
    });


    {% if is_single_page %}$('#table').on('page-change.bs.table', (number, size) => {
        setTimeout(function (){
        render(additional_headers, config.displayed_columns, table_rows, config.columns, config);
        }, 0);
    }){% endif %}

    let to_be_highlighted = parseInt(window.location.href.toString().split("highlight=").pop(), 10);
    {% if is_single_page %}
    let page_size = $('#table').bootstrapTable('getOptions').pageSize;
    $('#table').bootstrapTable('selectPage', Math.floor(to_be_highlighted / page_size) + 1);
    {% endif %}
    let rows = $("table > tbody > tr");
    rows.each(function() {
        if (this.dataset.index == to_be_highlighted) {
            $(this).children().addClass('active-row');
            {% if not detail_mode and not header_labels | length == 0 %}$(this).children().first().removeClass('active-row');{% endif %}
            $('#table').bootstrapTable('scrollTo', {unit: 'rows', value: to_be_highlighted {% if is_single_page %} % page_size{% endif %}})
        }
    });

    $( window ).resize(function() {
        var he = $( window ).height() - 150;
        // $('#table').bootstrapTable('resetView',{height: he});
    })
});

{% for title, custom_plot in custom_plots %}
function renderCustomPlots{{ loop.index0 }}(ah, dp_columns) {
    let index = dp_columns.indexOf("{{ title }}") + 1{% if detail_mode or not header_labels | length == 0 %} + 1{% endif %};
    let detail_mode = dp_columns.indexOf("{{ title }}") == -1;
    var data_function = {{ custom_plot.data }};
    var specs =  {{ custom_plot.spec }};
    let row = 0;
    let table_rows = $('#table').bootstrapTable('getData');
    $(`table > tbody > tr td:nth-child(${index})`).each(
        function() {
            if (!detail_mode) {
                var id = `{{ title | slugify }}-${row}`;
                this.classList.add("plotcell");
                const div = document.createElement("div");
                let value = table_rows[row]["{{ title }}"];
                let value_row = table_rows[row];
                var data = data_function(value, value_row);
                var s = specs;
                s.data = {};
                s.data.values = data;
                var opt = {"actions": {{ custom_plot.vega_controls }}};
                this.innerHTML = "";
                this.appendChild(div);
                vegaEmbed(div, JSON.parse(JSON.stringify(s)), opt);
            }
            row++;
        }
    );
}
{% endfor %}

{% for row, heatmap in header_heatmaps %}
function colorizeHeaderRow{{ loop.index0 }}() {
    var {{ heatmap.scale }} = vega.scale('{{ heatmap.scale }}');
    var scale = {{ heatmap.scale }}(){% if heatmap.domain %}.domain({{ heatmap.domain | json }}){% endif %}.range({% if heatmap.color_scheme %}vega.scheme('{{ heatmap.color_scheme }}'){% else %}[{% for color in heatmap.range %}"{{ color }}"{% if not loop.last %},{% endif %}{% endfor %}]{% endif %});
    var row = {{ row }};
    var skip_label = {% if not header_labels | length == 0 %}true{% else %}false{% endif %};
    $(`table > thead > tr:nth-child(${row + 1}) > td`).each(
        function() {
            var value = this.innerHTML;
            if (value !== "" && !skip_label) {
                this.style.setProperty("background-color", scale(value), "important");
            }
            skip_label = false;
        }
    );
}
{% endfor %}

{% for title, tuple in heatmaps %}
function colorizeDetailCard(value, div, scale) {
    if (value !== "") {
        $(`${div}`).css( "background-color", scale(value) );
    }
}
{% endfor %}

function embedSearch(index) {
    var source = `search/column_${index}.html`;
    document.getElementById('search-iframe').setAttribute("src",source);
}

{% if detail_mode %}
function detailFormatter(index, row) {
    let cp = [{% for title, custom_plot in custom_plots %}"{{ title }}"{% if not loop.last %},{% endif %}{% endfor %}];
    let ticks = [{% for title, tick in tick_plots %}"{{ title }}"{% if not loop.last %},{% endif %}{% endfor %}];
    let bars = [{% for title, bar in bar_plots %}"{{ title }}"{% if not loop.last %},{% endif %}{% endfor %}];
    let displayed_columns = [{% for title in titles %}{% if display_modes[title] == "normal" %}"{{ title }}"{% if not loop.last %},{% endif %}{% endif %}{% endfor %}];
    let hidden_columns = [{% for title in titles %}{% if display_modes[title] == "hidden" %}"{{ title }}"{% if not loop.last %},{% endif %}{% endif %}{% endfor %}];
    var html = []
    $.each(row, function (key, value) {
        if (!hidden_columns.includes(key) && !displayed_columns.includes(key) && key !== "linkouts") {
            if (cp.includes(key) || ticks.includes(key) || bars.includes(key)) {
                if (cp.includes(key)) {
                    id = `detail-plot-${index}-cp-${cp.indexOf(key)}`;
                } else if (bars.includes(key)) {
                    id = `detail-plot-${index}-bars-${bars.indexOf(key)}`;
                } else {
                    id = `detail-plot-${index}-ticks-${ticks.indexOf(key)}`;
                }
                var card = `<div class="card">
                   <div class="card-header">
                     ${key}
                   </div>
                   <div class="card-body">
                     <div id="${id}"></div>
                   </div>
                 </div>`;
                html.push(card);
            } else if (config.heatmap_titles.includes(key)) {
               id = `heatmap-${index}-${config.heatmap_titles.indexOf(key)}`;
               var card = `<div class="card">
                  <div class="card-header">
                    ${key}
                  </div>
                  <div id="${id}" class="card-body">
                    ${value}
                  </div>
                </div>`;
               html.push(card);
           } else {
                var card = `<div class="card">
                   <div class="card-header">
                     ${key}
                   </div>
                   <div class="card-body">
                    ${value}
                   </div>
                 </div>`;
                html.push(card);
            }
        }
    })
    return `<div class="d-flex flex-wrap">${html.join('')}</div>`
}
{% endif %}

{% for title, custom_plot in custom_plots %}
function renderCustomPlotDetailView{{ loop.index0 }}(value, div) {
    var data_function = {{ custom_plot.data }};
    var specs =  {{ custom_plot.spec }};
    var data = data_function(value);
    var s = specs;
    s.data = {};
    s.data.values = data;
    var opt = {"actions": {{ custom_plot.vega_controls }}};
    vegaEmbed(div, JSON.parse(JSON.stringify(s)), opt);
}
{% endfor %}

function addNumClass(dp_num, ah) {
    for (let i in dp_num) {
        if (dp_num[i]) {
            let row = 0;
            let n = parseInt(i) + {% if detail_mode %} + 2{% else %} + 1{% endif %};
            $(`table > tbody > tr td:nth-child(${n})`).each(
                function() {
                    this.classList.add("num-cell");
                    row++;
                }
            );
        }
    }
}

function render(additional_headers, displayed_columns, table_rows, columns, config) {
{% for title, custom_plot in custom_plots %}
    renderCustomPlots{{ loop.index0 }}(additional_headers.length, displayed_columns);
{% endfor %}

for (o of config.ticks) {
    if (displayed_columns.includes(o.title)) {
        renderTickPlot(additional_headers.length, displayed_columns, o.title, o.slug_title, o.specs, config[o.title].is_float, config[o.title].precision, config.detail_mode, config.header_label_length);
    }
}

for (o of config.bars) {
    if (displayed_columns.includes(o.title)) {
        renderBarPlot(additional_headers.length, displayed_columns, o.title, o.slug_title, o.specs, config[o.title].is_float, config[o.title].precision, config.detail_mode, config.header_label_length);
    }
}

for (o of config.link_urls) {
    if (displayed_columns.includes(o.title)) {
        linkUrlColumn(additional_headers.length, displayed_columns, columns, o.title, o.url, config.detail_mode, config.header_label_length);
    }
}

for (o of config.heatmaps) {
    if (displayed_columns.includes(o.title)) {
        colorizeColumn(additional_headers.length, displayed_columns, o.title, o.heatmap, o.scale, config.detail_mode, config.header_label_length);
    }
}

for (o of config.ellipsis) {
    if (displayed_columns.includes(o.title)) {
        shortenColumn(additional_headers.length, displayed_columns, o.title, o.ellipsis, config.detail_mode, config.header_label_length);
    }
}

{% for row, heatmap in header_heatmaps %}
    colorizeHeaderRow{{ loop.index0 }}();
{% endfor %}
$('[data-toggle="popover"]').popover()
{% if not detail_mode and not header_labels | length == 0 %}
$(`table > tbody > tr td:first-child`).each(function() {this.style.setProperty("visibility", "hidden"); this.style.setProperty("border", "none");});
{% endif %}
}
