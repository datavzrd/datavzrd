$(document).ready(function() {
    $('.table-container').show();
    $('.loading').hide();
    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    });
    $(function () {
    $('[data-toggle="popover"]').popover()
    });
    $('#table').bootstrapTable( 'resetView' , {height: window.innerHeight - 200} );
    $('.modal').on('shown.bs.modal', function () {
        window.dispatchEvent(new Event('resize'));
    });
    var decompressed = JSON.parse(LZString.decompressFromUTF16(data));

    var format = {% if formatter %}{{ '{' }}{% for f,v in formatter %}"{{ f }}":{{ v }}{% if not loop.last %},{% endif %}{% endfor %}{{ '}' }}{% else %}[];{% endif %}

    var he = $( window ).height() - 195;

    $('#table').bootstrapTable({
        height: he,
        columns: [{% for title in titles %}{
            field: '{{ title }}',
            title: '{{ title }}\r\n                        <a class=\"sym\" data-toggle=\"modal\" data-target=\"#modal_{{ loop.index0 }}\" onclick=\"if (show_plot_{{ loop.index0 }}) {vegaEmbed(\'#plot_{{ loop.index0 }}\', plot_{{ loop.index0 }})} else {document.getElementById(\'plot_{{ loop.index0 }}\').innerHTML = \'<p>No reasonable plot possible.</p>\'}\">\r\n                            <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-bar-chart-fill\" fill=\"currentColor\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\">\r\n                                <rect width=\"4\" height=\"5\" x=\"1\" y=\"10\" rx=\"1\"\/>\r\n                                <rect width=\"4\" height=\"9\" x=\"6\" y=\"6\" rx=\"1\"\/>\r\n                                <rect width=\"4\" height=\"14\" x=\"11\" y=\"1\" rx=\"1\"\/>\r\n                            <\/svg>\r\n                        <\/a>\r\n                        <a class=\"sym\" data-toggle=\"modal\" data-target=\"#{{ title }}-search\">\r\n                            <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-search\" fill=\"currentColor\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\">\r\n                                <path fill-rule=\"evenodd\" d=\"M10.442 10.442a1 1 0 0 1 1.415 0l3.85 3.85a1 1 0 0 1-1.414 1.415l-3.85-3.85a1 1 0 0 1 0-1.415z\"\/>\r\n                                <path fill-rule=\"evenodd\" d=\"M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z\"\/>\r\n                            <\/svg>\r\n                        <\/a>'{% if formatter %},
            formatter: function(value, row, index, field) { if (format["{{ title }}"] != undefined){ return format["{{ title }}"](value, row, index, field) } else { return value } }{% endif %}
        }{% if not loop.last %},{% endif %}{% endfor %}],
        {% if pin %}fixedColumns: true, fixedNumber: {{ pinned_columns }},{% endif %}
        data: []
    })

    let additional_headers = [{% if additional_headers %}{% for ah in additional_headers %}{{ "{" }}{% for title in titles %}"{{ title }}":"<b>{{ ah[title] }}</b>"{% if not loop.last %},{% endif %}{% endfor %}{{ "}" }}{% if not loop.last %},{% endif %}{% endfor %}{% endif %}];
    let columns = [{% for title in titles %}"{{ title }}"{% if not loop.last %},{% endif %}{% endfor %}];
    let num = [{% for title in titles %}{{ num[title] }}{% if not loop.last %},{% endif %}{% endfor %}];
    var table_rows = [];
    for (const r of decompressed) {
        var i = 0;
        row = {};
        for (const element of r) {
            var el = element;
            if (element.length > 30 && format[columns[i]] == undefined && !element.includes("<div") && !element.includes("<a href=")) {
                el = `${element.substring(0,30)}<a tabindex="0" role="button" href="#" data-toggle="popover" data-trigger="focus" data-html='true' data-content='<div style="overflow: auto; max-height: 30vh; max-width: 25vw;">${element}</div>'>...</a>`;
            }
            if (num[i]) {
                row[columns[i]] = el + "<button type=\"button\" class=\"btn btn-primary btn-sm\" data-val=\"" + el + "\" data-col=\"" + columns[i] + "\"><svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-bar-chart-fill\" viewBox=\"0 0 16 16\">\r\n  <path d=\"M1 11a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-3zm5-4a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v7a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7zm5-5a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V2z\"\/>\r\n<\/svg><\/button>";
            } else {
                row[columns[i]] = el;
            }
            i++;
        }
        table_rows.push(row);
    }
    $('#table').bootstrapTable('append', additional_headers)
    $('#table').bootstrapTable('append', table_rows)

    $( ".btn-sm" ).click(function() {
        var col = $(this).data( "col" );
        var field = $(this).data( "val" );
        var marker = { "bin_start": field};
        var index = columns.indexOf(col);
        switch (index) {
            {% for title in titles %}case {{ loop.index0 }}:
                if (plot_{{ loop.index0 }}["layer"].length > 1) {
                    $('#modal_{{ loop.index0 }}').modal();
                    var marked_plot = JSON.parse(JSON.stringify(plot_{{ loop.index0 }}));
                    marked_plot["layer"][1]["data"]["values"].push(marker);
                    vegaEmbed('#plot_{{ loop.index0 }}', marked_plot);
                }
                break;
            {% endfor %}
        }
    });

    {% for title, custom_plot in custom_plots %}
    renderCustomPlots{{ loop.index0 }}(additional_headers.length, columns);
    {% endfor %}

    let to_be_highlighted = parseInt(window.location.href.toString().split("highlight=").pop(), 10) + additional_headers.length;
    let rows = $("table > tbody > tr");
    rows.each(function() {
        if (this.dataset.index == to_be_highlighted) {
            $(this).children().addClass('active-row');
            $('#table').bootstrapTable('scrollTo', {unit: 'rows', value: to_be_highlighted})
        }
    });

    $( window ).resize(function() {
        var he = $( window ).height() - 150;
        $('#table').bootstrapTable('resetView',{height: he});
    })
});

function renderMarkdownDescription() {
    var innerDescription = document.getElementById('innerDescription');
    var converter = new showdown.Converter();
    converter.setFlavor('github');
    innerDescription.innerHTML = converter.makeHtml(innerDescription.dataset.markdown);
};

{% for title, custom_plot in custom_plots %}
function renderCustomPlots{{ loop.index0 }}(ah, columns) {
    var data_function = {{ custom_plot.data }};
    var specs =  {{ custom_plot.schema }};
    var rows = $("table > tbody > tr");
    var row_length = $("table > tbody > tr").length - ah;
    for (i = 0; i < row_length; i++) {
        var element = document.getElementById(`{{ title }}-${i}`);
        var data = data_function(element.dataset.value);
        var s = specs;
        s.data = {};
        s.data.values = data;
        var element_id = `#{{ title }}-${i}`;
        vegaEmbed(element_id, JSON.parse(JSON.stringify(s)));
    }
    let index = columns.indexOf("{{ title }}") + 1;
    $(`table > tbody > tr td:nth-child(${index})`).each(
        function() {
            this.classList.add("plotcell");
    });
};
{% endfor %}